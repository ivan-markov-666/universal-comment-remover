import { removeComments } from '../src/index';

// ============================================================================
// MIXED CONTENT FILES
// ============================================================================

describe('Mixed Content Files', () => {
  test('handles HTML with embedded CSS and JavaScript', () => {
    const code = `<!DOCTYPE html>
<!-- HTML comment -->
<html>
<head>
  <style>
    /* CSS comment */
    body { margin: 0; }
  </style>
  <script>
    // JavaScript comment
    console.log("Hello");
  </script>
</head>
</html>`;
    const result = removeComments(code, { language: 'html' });
    
    // HTML remover should only remove HTML comments
    expect(result.code).not.toContain('<!-- HTML comment -->');
    // CSS and JS comments should remain (as they're embedded)
    expect(result.code).toContain('/* CSS comment */');
    expect(result.code).toContain('// JavaScript comment');
  });

  test('handles Vue single file component', () => {
    const code = `<!-- Component comment -->
<template>
  <!-- Template comment -->
  <div>{{ message }}</div>
</template>

<script>
// Script comment
export default {
  data() { return { message: 'Hello' } }
}
</script>

<style>
/* Style comment */
.container { padding: 10px; }
</style>`;
    const result = removeComments(code, { language: 'html' });
    
    expect(result.code).not.toContain('<!-- Component comment -->');
    expect(result.code).not.toContain('<!-- Template comment -->');
  });

  test('handles Svelte component', () => {
    const code = `<script>
  // Component logic
  let count = 0;
</script>

<!-- Markup comment -->
<button on:click={() => count++}>
  Count: {count}
</button>

<style>
  /* Component styles */
  button { background: blue; }
</style>`;
    const result = removeComments(code, { language: 'html' });
    
    expect(result.code).not.toContain('<!-- Markup comment -->');
  });

  test('handles Markdown with code blocks', () => {
    const code = `# Title

<!-- HTML comment -->

\`\`\`javascript
// This is code, not a comment to remove
const x = 5;
\`\`\`

Regular text.`;
    const result = removeComments(code, { language: 'html' });
    
    expect(result.code).not.toContain('<!-- HTML comment -->');
    expect(result.code).toContain('// This is code');
  });
});

// ============================================================================
// BUILD ARTIFACTS
// ============================================================================

describe('Build Artifacts', () => {
  test('handles minified code with inline comments', () => {
    const code = `/*! License */var x=5,y=10;function test(){return x+y}`;
    const result = removeComments(code, {
      language: 'javascript',
      preserveLicense: true
    });
    
    expect(result.code).toContain('/*! License */');
  });

  test('handles transpiled TypeScript output', () => {
    const code = `"use strict";
// Generated by TypeScript compiler
Object.defineProperty(exports, "__esModule", { value: true });
var MyClass = /** @class */ (function () {
  function MyClass() {}
  return MyClass;
}());`;
    const result = removeComments(code, { language: 'javascript' });
    
    expect(result.code).toContain('Object.defineProperty');
    expect(result.code).not.toContain('// Generated by TypeScript');
  });

  test('handles bundled code with webpack comments', () => {
    const code = `/******/ (() => { // webpackBootstrap
/******/ "use strict";
/******/ var __webpack_modules__ = ({
/******/ });
/******/ })();`;
    const result = removeComments(code, { language: 'javascript' });
    
    expect(result.code).toContain('var __webpack_modules__');
    expect(result.code).not.toContain('// webpackBootstrap');
  });
});

// ============================================================================
// CONFIGURATION FILES
// ============================================================================

describe('Configuration Files', () => {
  test('handles .eslintrc.js with comments', () => {
    const code = `module.exports = {
  // ESLint configuration
  extends: ['eslint:recommended'],
  rules: {
    // Custom rules
    'no-console': 'warn', // Allow console
    'semi': ['error', 'always'] // Require semicolons
  }
};`;
    const result = removeComments(code, { language: 'javascript' });
    
    expect(result.code).toContain('extends:');
    expect(result.code).toContain('rules:');
    expect(result.code).not.toContain('// ESLint configuration');
    expect(result.code).not.toContain('// Custom rules');
  });

  test('handles webpack.config.js', () => {
    const code = `const path = require('path');

module.exports = {
  // Entry point
  entry: './src/index.js',
  // Output configuration
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js' // Bundle name
  }
};`;
    const result = removeComments(code, { language: 'javascript' });
    
    expect(result.code).toContain('entry:');
    expect(result.code).toContain('output:');
    expect(result.code).not.toContain('// Entry point');
    expect(result.code).not.toContain('// Bundle name');
  });

  test('handles tsconfig.json with comments', () => {
    const code = `{
  // TypeScript configuration
  "compilerOptions": {
    "target": "ES2019", // Target version
    "module": "CommonJS", // Module system
    "strict": true // Strict mode
  }
}`;
    const result = removeComments(code, { language: 'json' });
    
    expect(result.code).toContain('"compilerOptions"');
    expect(result.code).not.toContain('// TypeScript configuration');
    expect(result.code).not.toContain('// Target version');
  });
});
